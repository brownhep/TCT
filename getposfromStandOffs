#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import stages
import coordinatesFile as cF

def newCoordinates( coord, ax, distance ):
  axis = [ "x", "y", "z" ]
  indice = axis.index( ax )
  newCoord = coord[ : ]
  newCoord[ indice ] = str( int( newCoord[ indice ] ) + distance )
  return newCoord

def parseador():
  parser = argparse.ArgumentParser( description = "Move the axis to the selected relative position." )
  parser.add_argument( "-e", "--axis", type = str , default = "x", help = "select the axis", metavar = "" )
  parser.add_argument( "-s", "--updateRelRefPos", action="store_true", help = "updates relative position of Ref diode in sensors.txt")
  args = parser.parse_args()
  return args

def main( ax, updateRelRefPos ):
  s = stages.open_socket()
  stages.enableLimitSwitch(s,1)
  relCoord = stages.getRelativeCoordinates( s )
  newCoord = newCoordinates( relCoord, "x", 1 )
  stages.sendtoCoordinates( s, newCoord )
  absCoord = stages.getAbsoluteCoordinates( s )
  print absCoord, relCoord
  OriginPos = [0,0,0]
  for i in xrange(3): OriginPos[i] = int(absCoord[i]) - int(relCoord[i])
  print absCoord, relCoord, OriginPos
  cF.writeOriginPos(OriginPos)
  print cF.readOriginPos()
  stages.close_socket( s )

  if updateRelRefPos:
    sensors = cF.getCoordFromFile()
    absPos = sensors["absCoordRefDiode"]
    print "AbsPosRef: ", absPos
    cF.changeRelCoordRefDiode( absPos[0]-OriginPos[0], absPos[1]-OriginPos[1], absPos[2]-OriginPos[2] )


if __name__ == "__main__":
  args = parseador()
  main( args.axis, args.updateRelRefPos )
