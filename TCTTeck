#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import argparse
import time
import datetime
from OOHw.interface.InterfaceFactory import InterfaceFactory
from OOHw.files.BINWriter import BINWriter
import powerSupply as pW


def acquireData( tektronix, numAcquisitions, averageNumber, filename ):
  tektronix.obtainPreamble()
  binwriter = BINWriter( filename )
  binwriter.header = tektronix.preamble
  for i in range( 1, numAcquisitions + 1 ):
    tektronix.controlAcquisition( "RUN" )
    time.sleep( 1 )
    waveform, points, bytesPoint = tektronix.readWaveformBIN( averageNumber )
    binwriter.addData( waveform )
  binwriter.bytesPerPoint( bytesPoint )
  binwriter.pointsPerMeasurement( points )
  binwriter.writeData()
  binwriter.close()

def parseador():  # To convert the timestamp to a normal date time: datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
  parser = argparse.ArgumentParser( description = "TCT acquisition program" )
  parser.add_argument( "-a", "--acquisition_mode", type = str, choices = [ "sample", "peakdetect", "average", "envelope" ], default = "sample", help = "acquisition mode. Choices = sample, peakdetect, average, envelope. Default = %(default)s", metavar = "" )
  parser.add_argument( "-n", "--acquisition_number", type = int, help = "number of acquisitions for TCT. Default = 512. For average mode, default = 1", metavar = "" )
  parser.add_argument( "-g", "--average_number", type = str, default = "512", help = " number of waves to average when average acquisition is chosen. Default = %(default)s", metavar = "" )
  parser.add_argument( "-c", "--channel", type = int, default = "4", help = "acquisition channel. Default = %(default)s", metavar = "" )
  parser.add_argument( "-v", "--voltage", type = str, default = "0", help = "bias voltage applied to the sensor in V. Default = %(default)sV", metavar = ""  )
  parser.add_argument( "-m", "--compliance", type = float, default = "10e-6", help = "compliance high voltage power supply. Default = %(default)sA", metavar = "" )
  parser.add_argument( "-l", "--amp_voltage", type = str, default = "8", help = "bias voltage for the amplifier in V. Default = %(default)sV", metavar = ""  )
  parser.add_argument( "-p", "--amp_compliance", type = float, default = "300e-3", help = "compliance for the amplifier power supply. Default = %(default)sA", metavar = "" )
  parser.add_argument( "-b", "--bulk", type = str, choices = [ "p", "n" ], help = "bulk of the sensor. Choices = n, p", metavar = "" )
  parser.add_argument( "-i", "--intensity", type = str, default = "0", help = "laser intensity in %%. Default = %(default)s", metavar = "" )
  parser.add_argument( "-t", "--temperature", type = str, default = "32", help = "acquisition temperature in F. Default = %(default)s ", metavar = ""  )
  parser.add_argument( "-f", "--filename", type = str, default = "TCT_Voltage_Temp_Int_" + datetime.datetime.fromtimestamp( time.time() ).strftime( '%Y-%m-%d_%H:%M' ) + ".bin", help = "binary file name. Default = %(default)s", metavar = "" )
  parser.add_argument( "-x", "--no_turn_off", action='store_true', help = "do not turn off the power supply at the end." )
  parser.add_argument( "-y", "--no_turn_on", action='store_true', help = "do not control the HV power supply." )
  parser.add_argument( "-z", "--turn_off", action='store_true', help = "turn off both power supply and exit." )
  args = parser.parse_args()
  if ".bin" not in args.filename:
    args.filename = args.filename + ".bin"
  if "_Voltage_Temp" not in args.filename:
    args.filename = args.filename.replace( ".bin", "_Voltage_Temp_Int" + datetime.datetime.fromtimestamp( time.time() ).strftime('_%Y-%m-%d_%H:%M:%S') + ".bin" )
  if "Voltage" in args.filename:
    args.filename = args.filename.replace( "Voltage", "V" + args.voltage + "V" )
    args.filename = args.filename.replace( "Temp", "T" + args.temperature + "F" )
    args.filename = args.filename.replace( "Int", "I" + args.intensity )
  if args.voltage and not args.bulk and not args.turn_off:
    parser.error( "--voltage requires --bulk" )
  if float( args.voltage  ) > 0 and args.bulk == "n":
    parser.error( "n bulk requires negative voltage" )
  if float( args.voltage  ) < 0 and args.bulk == "p":
    parser.error( "p bulk requires positive voltage" )
  if args.acquisition_number is None:
    if args.acquisition_mode == "average":
      args.acquisition_number = 1
    else:
      args.acquisition_number = 512
  return args

def main():
  args = parseador()
  factory = InterfaceFactory( "setupBrown.ini" )
  tektronix = factory.getDevice( "scope" )
  keithley = factory.getDevice( "highVoltage" )
#  agilent = factory.getDevice( "lowVoltage" )
  if args.turn_off:
    pW.turnOFFPowerSupply( keithley )
    return
#  agilent.setChannel( "P25V" )
#  pW.setPowerSupply( agilent, args.amp_voltage, args.amp_compliance )
  if not args.no_turn_on:
    pW.setPowerSupply( keithley, args.voltage, args.compliance )
  tektronix.controlAcquisition( "STOP" )
  tektronix.setChannel( args.channel )
  tektronix.acquireMode( args.acquisition_mode )
  if args.acquisition_mode == "average":
    tektronix.acquireAverageNumber( args.average_number )
  tektronix.singleSequence()
  time.sleep( 1 )
  acquireData( tektronix, args.acquisition_number, args.average_number, os.path.join( os.getcwdu(), args.filename ) )
  if not args.no_turn_off:
    pW.turnOFFPowerSupply( keithley )
#    pW.turnOFFPowerSupply( agilent )


if __name__ == "__main__":
  main()
